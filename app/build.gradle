apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.scaleup.kotlingithubbrowser"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.support.v4
    implementation deps.support.annotations
    implementation deps.constraint_layout

    //arch
    implementation deps.arch_core.testing

    //room
    kapt deps.room.compiler
    implementation deps.room.runtime
    implementation deps.room.rxjava2
    implementation deps.room.testing

    //lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    kapt deps.lifecycle.compiler

    //kotlin
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.test
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.2.10"

    //dagger
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler

    //retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.mock

    //okhttp
    implementation deps.okhttp_logging_interceptor

    //mockito
    testImplementation deps.mockito.core
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"

    //unit tests
    testImplementation deps.junit

    //mock_web_server
    testImplementation deps.mock_web_server
    testImplementation (deps.arch_core.testing, {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    //instrumentation tests
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules

    //espresso
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.intents
    androidTestImplementation deps.espresso.contrib

    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    androidTestImplementation(deps.arch_core.testing, {
    })
    androidTestImplementation deps.dexmaker
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }

    //databinding
    kapt deps.kotlin.dataBindingAndroid
}


task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}